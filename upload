#!/usr/bin/env python

import os
import subprocess
import argparse
import hashlib
import json

TARGETS_DIR = "targets-ite2/"
PACKAGES_DIR = "packages/"
IN_TOTO_METADATA_DIR = "in-toto-metadata/"
PUBKEYS_DIR = "in-toto-pubkeys/"
# Define role
ROLE = "packages-and-in-toto-metadata-signer"


def main():
    # Take package name as argument
    parser = argparse.ArgumentParser(description="Upload package and in-toto metadata")
    parser.add_argument("package_name", help="Name of the package to upload")
    args = parser.parse_args()

    package_name = args.package_name

    # Before uploading, you must change to the directory where the targets are stored
    os.chdir(TARGETS_DIR)

    # Define role and filenames that have to be passed to `../tuf-ite2/uploader/uploader` binary
    package_path = os.path.join(PACKAGES_DIR, package_name)
    package_name_sha256 = hashlib.sha256(package_name.encode()).hexdigest()
    custom_metadata_filename = package_name_sha256 + '.package.custom'


    # uploader init (tofu)
    subprocess.run(["../tuf-ite2/uploader/uploader", "tofu"], check=True)

    # upload package with its custom metadata
    subprocess.run(
        [
            "../tuf-ite2/uploader/uploader",
            "add-target",
            ROLE,
            package_path,
            "--custom",
            custom_metadata_filename,
        ],
        check=True,
    )

    # upload all the links corresponding for the package you uploaded
    with open(custom_metadata_filename, "r") as f:
        custom_metadata = json.load(f)
        for link_path in custom_metadata["custom"]["in-toto"]:
            if link_path.endswith(".link"):
                subprocess.run(
                    [
                        "../tuf-ite2/uploader/uploader",
                        "add-target",
                        ROLE,
                        link_path,
                    ],
                    check=True,
                )


if __name__ == "__main__":
    main()
